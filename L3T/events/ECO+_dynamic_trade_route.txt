namespace = L3TRADE

# Give the step B of the trade routes
province_event = {
    id = L3TRADE.1
	desc = "DESCSTEP_B"
	picture = GFX_evt_market
	
	trigger = {
		#must not has been checked already
		NOT = { has_province_flag = checked_blocB } #Flag to avoid big CPU computation of a trigger for nothing (see limit of the option)
		NOT = { has_province_flag = invalidate_trade }
		# Check for the bloc B if the province is neighbor to a province with the previous bloc, here A
		any_neighbor_province = {
			has_province_flag = bloc_A
		}
		#not already has any block
		NOT = {
			has_province_flag = bloc_A
			has_province_flag = bloc_B
			has_province_flag = bloc_C
			has_province_flag = bloc_D
			has_province_flag = bloc_E
		}
	}
		
	mean_time_to_happen = {
		months = 100
		modifier = { #favours double cities
			factor = 0.01
			any_province_holding = {
				count = 2
				tier = baron
				holding_type = city
			}
		}
		modifier = { #favours commercial cities
			factor = 0.5
				any_province_holding = {
					tier = baron
					holding_type = city
					has_building = VOC_COMMERCIALE
				}
		}
		modifier = { 
			factor = 0.8
			OR = {
				any_province_holding = { has_building = CA_route_L1 }
				any_province_holding = { has_building = CT_route_L1 }
				any_province_holding = { has_building = TP_route_L1 }
				any_province_holding = { has_building = CA_fleuve_L1 }
				any_province_holding = { has_building = CT_fleuve_L1 }
				any_province_holding = { has_building = TP_fleuve_L1 }
				}
		}
		modifier = { 
			factor = 0.6
			OR = {
				any_province_holding = { has_building = CA_route_L2 }
				any_province_holding = { has_building = CT_route_L2 }
				any_province_holding = { has_building = TP_route_L2 }
				any_province_holding = { has_building = CA_fleuve_L2 }
				any_province_holding = { has_building = CT_fleuve_L2 }
				any_province_holding = { has_building = TP_fleuve_L2 }
				}
		}
		modifier = {
			factor = 0.9
			any_province_holding = {
				OR = {
					has_building = CA_col_L1
					has_building = CT_col_L1
					has_building = TP_col_L1
				}
			}
		}
		modifier = {
			factor = 0.9
			any_province_holding = {
				OR = {
					has_building = CT_relais_L1
					has_building = TP_relais_L1
				}
			}
		}
		modifier = {
			factor = 0.9
			any_province_holding = {
				OR = {
					has_building = CA_pont_L2 #pont #requires_town_1
					has_building = CT_pont_L2 #pont #requires_town_1
					has_building = TP_pont_L2 #pont #requires_town_1
					has_building = CT_oasis_L2 #désert #requires_town_1
				}
			}
		}
		modifier = { factor = 0.8	any_province_holding = { has_building = CT_pont_fluvial_L4 }}
		modifier = { factor = 0.9	has_province_modifier = province_fleuve }
		modifier = { 
			factor = 3
			OR = { #favors splitting away from vanilla trade roads
				trade_route = silk_road 
				trade_route = trans_saharan_trade_route
			}
		}
		#octroi law influence
		modifier = {
			factor = 0.8
			NOT = {
				any_province_holding = { has_holding_modifier = octroi_holding }
			}
		}
		modifier = {
			factor = 1.2
				any_province_holding = { has_holding_modifier = octroi_holding }
		}
	}

	immediate = {
		set_province_flag = checked_blocB
				#if valid, block is set, if not, nothing happens, but owner is notified
		if = {
			limit = {
				NOT = {
					# To not give step B to the province which has already a bloc
				##check by trigger already
					#has_province_flag = bloc_A
					#has_province_flag = bloc_B
					#has_province_flag = bloc_C
					#has_province_flag = bloc_D
					#has_province_flag = bloc_E
					
					#can't connect to any block
					any_neighbor_province = { has_province_flag = bloc_B }
					any_neighbor_province = { has_province_flag = bloc_C }
					any_neighbor_province = { has_province_flag = bloc_D }
					any_neighbor_province = { has_province_flag = bloc_E }
				}
			}
			hidden_tooltip = {	
				set_province_flag = bloc_B
				add_province_modifier = { name = prosperity_modifier_1 duration = -1 hidden=yes}
				
				# The route size is the max route size of its C neighboors + 1
				set_variable = { which = "route_size" value = 1 } # the value to evaluate the neighboor, then to store final value
				set_variable = { which = "tmp" value = 1 } # store the value when route_size is used to evaluate neighboor
				any_neighbor_province = {
					limit = { has_province_flag = bloc_C }
					ROOT = { subtract_variable = { which = "route_size" which = PREV} }
					if = {
						limit = { NOT = { ROOT = { check_variable = { which = "route_size" value = 0 } } } }
						# We have found a neighboor with a route_size value more or equal, so we update the value
						ROOT = { set_variable = { which = "route_size" which = PREV} } # B route_size = C route_size
						ROOT = { change_variable = { which = "route_size" value = 1} } # B route_size = C route_size + 1
						ROOT = { set_variable = { which = "tmp" which = "route_size"} } # store the value
					}
					# Reset the B route_size for the stored value
					ROOT = { set_variable = { which = "route_size" which = "tmp"} }
				}
				
				# Update the route size in previous blocs (here A)
				any_neighbor_province = {
					limit = { has_province_flag = bloc_A }
					province_event = { id = L3TRADE.8 days = 10}
				}
				
				add_province_modifier = { name = future_route duration = -1 }
				any_neighbor_province = {
					limit = { has_province_flag = bloc_A }
					save_event_target_as = origin_trade_province
				}

				#mark as checked_bloc invalide neighbors
				any_neighbor_province = {
					limit = {
						#not has a bloc already
						NOT = {
							has_province_flag = bloc_A
							has_province_flag = bloc_B
							has_province_flag = bloc_C
							has_province_flag = bloc_D
							has_province_flag = bloc_E
							has_province_flag = invalidate_trade
						}
						#is not invalidated already
						NOT = { 
							has_province_flag = checked_blocB
						}
						#fits same conditions
						any_neighbor_province = {
							has_province_flag = bloc_A
						}
					}
					set_province_flag = checked_blocB
					set_province_flag = invalidate_trade
					province_event = { id = L3TRADE.21 }
				}
			}
			province_event = { id = L3TRADE.20 }
		}
	}

	option = {
		name = "OK"
	}
	
	#option = {
	#	name = "L3TRADESTEPOK"
	#	#merchants start using the province
	#	trigger = { has_province_flag = bloc_B }
	#}
	
	#option = {
	#	name = "L3TRADESTEPKO"
	#	trigger = { 
	#		NOT = {
	#			#has_province_flag = bloc_A
	#			has_province_flag = bloc_B
	#			#has_province_flag = bloc_C
	#			#has_province_flag = bloc_D
	#			#has_province_flag = bloc_E
	#		}
	#	}
	#}
	##now checked before, limits spam
	#option = {
	#	name = "L3TRADESTEPALREADY"
	#	trigger = { 
	#		OR = {
	#			has_province_flag = bloc_A
	#			has_province_flag = bloc_C
	#			has_province_flag = bloc_D
	#			has_province_flag = bloc_E
	#		}
	#	}
	#}
}

# Give the step C of the trade routes
province_event = {
    id = L3TRADE.2
	desc = "DESCSTEP_C"
	picture = GFX_evt_market
	
	trigger = {
		#must not has been checked already
		NOT = { has_province_flag = checked_blocC } 
		NOT = { has_province_flag = invalidate_trade }
		#Check for the bloc C if the province is neighbor to a province with the previous bloc, here B
			any_neighbor_province = {
			has_province_flag = bloc_B
		}
		#not already has any block
		NOT = {
			has_province_flag = bloc_A
			has_province_flag = bloc_B
			has_province_flag = bloc_C
			has_province_flag = bloc_D
			has_province_flag = bloc_E
		}
	}
		
	mean_time_to_happen = {
		months = 100
		modifier = { #favours double cities
			factor = 0.01
			any_province_holding = {
				count = 2
				tier = baron
				holding_type = city
			}
		}
		modifier = { #favours commercial cities
			factor = 0.5
				any_province_holding = {
					tier = baron
					holding_type = city
					has_building = VOC_COMMERCIALE
				}
		}
		modifier = { 
			factor = 0.8
			OR = {
				any_province_holding = { has_building = CA_route_L1 } #route terrestre
				any_province_holding = { has_building = CT_route_L1 } #route terrestre
				any_province_holding = { has_building = TP_route_L1 } #route terrestre
				any_province_holding = { has_building = CA_fleuve_L1 } #route fluviale (port)
				any_province_holding = { has_building = CT_fleuve_L1 } #route fluviale (port)
				any_province_holding = { has_building = TP_fleuve_L1 } #route fluviale (port)
				}
		}
		modifier = { 
			factor = 0.6
			OR = {
				any_province_holding = { has_building = CA_route_L2 } #route terrestre #requires_town_1
				any_province_holding = { has_building = CT_route_L2 } #route terrestre #requires_town_1
				any_province_holding = { has_building = TP_route_L2 } #route terrestre #requires_town_1
				any_province_holding = { has_building = CA_fleuve_L2 } #route fluviale (port) #requires_town_1
				any_province_holding = { has_building = CT_fleuve_L2 } #route fluviale (port) #requires_town_1
				any_province_holding = { has_building = TP_fleuve_L2 } #route fluviale (port) #requires_town_1
				}
		}
		modifier = {
			factor = 0.9
			any_province_holding = {
				OR = {
					has_building = CA_col_L1 #montagne
					has_building = CT_col_L1 #montagne
					has_building = TP_col_L1 #montagne
				}
			}
		}
		modifier = {
			factor = 0.9
			any_province_holding = {
				OR = {
					has_building = CT_relais_L1 #requires CT_col_1
					has_building = TP_relais_L1 #requires TP_col_1
				}
			}
		}
		modifier = {
			factor = 0.9
			any_province_holding = {
				OR = {
					has_building = CA_pont_L2 #pont #requires_town_1
					has_building = CT_pont_L2 #pont #requires_town_1
					has_building = TP_pont_L2 #pont #requires_town_1
					has_building = CT_oasis_L2 #désert #requires_town_1
				}
			}
		}
		modifier = { factor = 0.8	any_province_holding = { has_building = CT_pont_fluvial_L4 }}
		modifier = { factor = 0.9	has_province_modifier = province_fleuve }
		modifier = { 
			factor = 3
			OR = { #favors splitting away from vanilla trade roads
				trade_route = silk_road 
				trade_route = trans_saharan_trade_route
			}
		}
		#octroi law influence
		modifier = {
			factor = 0.8
			NOT = {
				any_province_holding = { has_holding_modifier = octroi_holding }
			}
		}
		modifier = {
			factor = 1.2
				any_province_holding = { has_holding_modifier = octroi_holding }
		}
	}

	immediate = {
		set_province_flag = checked_blocC
		#if valid, bloc is set, if not, nothing happens
		if = {
			limit = {
				NOT = {
					# To not give step B to the province which has already a bloc
				##check by trigger already
					#has_province_flag = bloc_A
					#has_province_flag = bloc_B
					#has_province_flag = bloc_C
					#has_province_flag = bloc_D
					#has_province_flag = bloc_E

					#can't connect to any block
					any_neighbor_province = { has_province_flag = bloc_A }
					any_neighbor_province = { has_province_flag = bloc_C }
					any_neighbor_province = { has_province_flag = bloc_D }
					any_neighbor_province = { has_province_flag = bloc_E }
				}
			}
			hidden_tooltip = {			
				set_province_flag = bloc_C
				add_province_modifier = { name = prosperity_modifier_1 duration = -1 hidden=yes}
				
				# The route size is the max route size of its D neighboors + 1
				set_variable = { which = "route_size" value = 1 }
				set_variable = { which = "tmp" value = 1 }
				any_neighbor_province = {
					limit = { has_province_flag = bloc_D }
					ROOT = { subtract_variable = { which = "route_size" which = PREV} }
					if = {
						limit = { NOT = { ROOT = { check_variable = { which = "route_size" value = 0 } } } }
						# We have found a neighboor with a route_size value more or equal, so we update the value
						ROOT = { set_variable = { which = "route_size" which = PREV} }
						ROOT = { change_variable = { which = "route_size" value = 1} }
						ROOT = { set_variable = { which = "tmp" which = "route_size"} }
					}
					# Reset the C route_size for the stored value
					ROOT = { set_variable = { which = "route_size" which = "tmp"} }
				}

				# Update the route size in previous blocs (here B)				
				any_neighbor_province = {
					limit = { has_province_flag = bloc_B }
					province_event = { id = L3TRADE.8 days = 10}
				}
				
				add_province_modifier = { name = future_route duration = -1 }
				any_neighbor_province = {
					limit = { has_province_flag = bloc_B }
					save_event_target_as = origin_trade_province
				}
				
				#mark as checked_bloc invalide neighbors
				any_neighbor_province = {
					limit = {
						#not has a bloc already
						NOT = {
							has_province_flag = bloc_A
							has_province_flag = bloc_B
							has_province_flag = bloc_C
							has_province_flag = bloc_D
							has_province_flag = bloc_E
							has_province_flag = invalidate_trade
						}
						#is not invalidated already
						NOT = { 
							has_province_flag = checked_blocC
						}
						#fits same conditions
						any_neighbor_province = {
							has_province_flag = bloc_B
						}
					}
					set_province_flag = checked_blocC
					set_province_flag = invalidate_trade
					province_event = { id = L3TRADE.21 }
				}
			}
			province_event = { id = L3TRADE.20 }
		}
	}
		
	option = {
		name = "OK"
	}
	
	#option = {
	#	name = "L3TRADESTEPOK"
	#	#merchants start using the province
	#	trigger = { has_province_flag = bloc_B }
	#}
	
	#option = {
	#	name = "L3TRADESTEPKO"
	#	trigger = { 
	#		NOT = {
	#			#has_province_flag = bloc_A
	#			has_province_flag = bloc_B
	#			#has_province_flag = bloc_C
	#			#has_province_flag = bloc_D
	#			#has_province_flag = bloc_E
	#		}
	#	}
	#}
	##now checked before, limits spam
	#option = {
	#	name = "L3TRADESTEPALREADY"
	#	trigger = { 
	#		OR = {
	#			has_province_flag = bloc_A
	#			has_province_flag = bloc_C
	#			has_province_flag = bloc_D
	#			has_province_flag = bloc_E
	#		}
	#	}
	#}
}

# Give the step D of the trade routes
province_event = {
    id = L3TRADE.3
	desc = "DESCSTEP_D"
	picture = GFX_evt_market
	
	trigger = {
		#must not has been checked already
		NOT = { has_province_flag = checked_blocD }
		#NOT = { has_province_flag = invalidate_trade }
		# Check for the bloc B if the province is neighbor to a province with the previous bloc, here A
		any_neighbor_province = {
			has_province_flag = bloc_C
		}
		#not already has any block
		NOT = {
			has_province_flag = bloc_A
			has_province_flag = bloc_B
			has_province_flag = bloc_C
			has_province_flag = bloc_D
			has_province_flag = bloc_E
		}
	}
		
	mean_time_to_happen = {
		months = 100
		modifier = { #favours double cities
			factor = 0.01
			any_province_holding = {
				count = 2
				tier = baron
				holding_type = city
			}
		}
		modifier = { #favours commercial cities
			factor = 0.5
				any_province_holding = {
					tier = baron
					holding_type = city
					has_building = VOC_COMMERCIALE
				}
		}
		modifier = { 
			factor = 0.8
			OR = {
				any_province_holding = { has_building = CA_route_L1 }
				any_province_holding = { has_building = CT_route_L1 }
				any_province_holding = { has_building = TP_route_L1 }
				any_province_holding = { has_building = CA_fleuve_L1 }
				any_province_holding = { has_building = CT_fleuve_L1 }
				any_province_holding = { has_building = TP_fleuve_L1 }
				}
		}
		modifier = { 
			factor = 0.6
			OR = {
				any_province_holding = { has_building = CA_route_L2 }
				any_province_holding = { has_building = CT_route_L2 }
				any_province_holding = { has_building = TP_route_L2 }
				any_province_holding = { has_building = CA_fleuve_L2 }
				any_province_holding = { has_building = CT_fleuve_L2 }
				any_province_holding = { has_building = TP_fleuve_L2 }
				}
		}
		modifier = {
			factor = 0.9
			any_province_holding = {
				OR = {
					has_building = CA_col_L1
					has_building = CT_col_L1
					has_building = TP_col_L1
				}
			}
		}
		modifier = {
			factor = 0.9
			any_province_holding = {
				OR = {
					has_building = CT_relais_L1
					has_building = TP_relais_L1
				}
			}
		}
		modifier = {
			factor = 0.9
			any_province_holding = {
				OR = {
					has_building = CA_pont_L2 #pont #requires_town_1
					has_building = CT_pont_L2 #pont #requires_town_1
					has_building = TP_pont_L2 #pont #requires_town_1
					has_building = CT_oasis_L2 #désert #requires_town_1
				}
			}
		}
		modifier = { factor = 0.8	any_province_holding = { has_building = CT_pont_fluvial_L4 }}
		modifier = { factor = 0.9	has_province_modifier = province_fleuve }
		#octroi law influence
		modifier = {
			factor = 0.8
			NOT = {
				any_province_holding = { has_holding_modifier = octroi_holding }
			}
		}
		modifier = {
			factor = 1.2
				any_province_holding = { has_holding_modifier = octroi_holding }
		}
	}

	immediate = {
		set_province_flag = checked_blocD
		#if valid, bloc is set, if not, nothing happens
		if = {
			limit = {
				NOT = {
					# To not give step B to the province which has already a bloc
				##check by trigger already
					#has_province_flag = bloc_A
					#has_province_flag = bloc_B
					#has_province_flag = bloc_C
					#has_province_flag = bloc_D
					#has_province_flag = bloc_E
					
					#can't connect to any block but E from another road
					any_neighbor_province = { has_province_flag = bloc_A }
					any_neighbor_province = { has_province_flag = bloc_B }
					any_neighbor_province = { has_province_flag = bloc_D }
					#any_neighbor_province = { has_province_flag = bloc_E }###this should permit to create a D province adjacent to an existing E province
				}
			}
			hidden_tooltip = {			
				set_province_flag = bloc_D
				add_province_modifier = { name = prosperity_modifier_1 duration = -1 hidden=yes}
				
				# The route size is the max route size of its C neighboors + 1
				set_variable = { which = "route_size" value = 1 }
				set_variable = { which = "tmp" value = 1 }
				any_neighbor_province = {
					limit = { has_province_flag = bloc_E }
					ROOT = { subtract_variable = { which = "route_size" which = PREV} }
					if = {
						limit = { NOT = { ROOT = { check_variable = { which = "route_size" value = 0 } } } }
						# We have found a neighboor with a route_size value more or equal, so we update the value
						ROOT = { set_variable = { which = "route_size" which = PREV} }
						ROOT = { change_variable = { which = "route_size" value = 1} }
						ROOT = { set_variable = { which = "tmp" which = "route_size"} }
					}
					# Reset the C route_size for the stored value
					ROOT = { set_variable = { which = "route_size" which = "tmp"} }
				}

				# Update the route size in previous blocs (here C)				
				any_neighbor_province = {
					limit = { has_province_flag = bloc_C }
					province_event = { id = L3TRADE.8 days = 10}
				}
				
				add_province_modifier = { name = future_route duration = -1 }
				any_neighbor_province = {
					limit = { has_province_flag = bloc_C }
					save_event_target_as = origin_trade_province
				}

				#mark as checked_bloc invalide neighbors
				any_neighbor_province = {
					limit = {
						#not has a bloc already
						NOT = {
							has_province_flag = bloc_A
							has_province_flag = bloc_B
							has_province_flag = bloc_C
							has_province_flag = bloc_D
							has_province_flag = bloc_E
							#has_province_flag = invalidate_trade
						}
						#is not invalidated already
						NOT = { 
							has_province_flag = checked_blocD
						}
						#fits same conditions
						any_neighbor_province = {
							has_province_flag = bloc_C
						}
					}
					set_province_flag = checked_blocD
					#set_province_flag = invalidate_trade
					province_event = { id = L3TRADE.21 }
				}
			}
			province_event = { id = L3TRADE.20 }
		}
	}
			
	option = {
		name = "OK"
	}
	
	#option = {
	#	name = "L3TRADESTEPOK"
	#	#merchants start using the province
	#	trigger = { has_province_flag = bloc_B }
	#}
	
	#option = {
	#	name = "L3TRADESTEPKO"
	#	trigger = { 
	#		NOT = {
	#			#has_province_flag = bloc_A
	#			has_province_flag = bloc_B
	#			#has_province_flag = bloc_C
	#			#has_province_flag = bloc_D
	#			#has_province_flag = bloc_E
	#		}
	#	}
	#}
	##now checked before, limits spam
	#option = {
	#	name = "L3TRADESTEPALREADY"
	#	trigger = { 
	#		OR = {
	#			has_province_flag = bloc_A
	#			has_province_flag = bloc_C
	#			has_province_flag = bloc_D
	#			has_province_flag = bloc_E
	#		}
	#	}
	#}
}

# Give the step E of the trade routes
province_event = {
    id = L3TRADE.4
	desc = "DESCSTEP_E"
	picture = GFX_evt_market
	
	trigger = {
		#must not has been checked already
		NOT = { has_province_flag = checked_blocE }
		#NOT = { has_province_flag = invalidate_trade }
		# Check for the bloc B if the province is neighbor to a province with the previous bloc, here A
		any_neighbor_province = {
			has_province_flag = bloc_D
		}
		#not already has any block
		NOT = {
			has_province_flag = bloc_A
			has_province_flag = bloc_B
			has_province_flag = bloc_C
			has_province_flag = bloc_D
			has_province_flag = bloc_E
		}
	}
		
	mean_time_to_happen = {
		months = 100
		modifier = { #favours double cities
			factor = 0.01
			any_province_holding = {
				count = 2
				tier = baron
				holding_type = city
			}
		}
		modifier = { #favours commercial cities
			factor = 0.5
				any_province_holding = {
					tier = baron
					holding_type = city
					has_building = VOC_COMMERCIALE
				}
		}
		modifier = { 
			factor = 0.8
			OR = {
				any_province_holding = { has_building = CA_route_L1 }
				any_province_holding = { has_building = CT_route_L1 }
				any_province_holding = { has_building = TP_route_L1 }
				any_province_holding = { has_building = CA_fleuve_L1 }
				any_province_holding = { has_building = CT_fleuve_L1 }
				any_province_holding = { has_building = TP_fleuve_L1 }
				}
		}
		modifier = { 
			factor = 0.6
			OR = {
				any_province_holding = { has_building = CA_route_L2 }
				any_province_holding = { has_building = CT_route_L2 }
				any_province_holding = { has_building = TP_route_L2 }
				any_province_holding = { has_building = CA_fleuve_L2 }
				any_province_holding = { has_building = CT_fleuve_L2 }
				any_province_holding = { has_building = TP_fleuve_L2 }
				}
		}
		modifier = {
			factor = 0.9
			any_province_holding = {
				OR = {
					has_building = CA_col_L1
					has_building = CT_col_L1
					has_building = TP_col_L1
				}
			}
		}
		modifier = {
			factor = 0.9
			any_province_holding = {
				OR = {
					has_building = CT_relais_L1
					has_building = TP_relais_L1
				}
			}
		}
		modifier = {
			factor = 0.9
			any_province_holding = {
				OR = {
					has_building = CA_pont_L2 #pont #requires_town_1
					has_building = CT_pont_L2 #pont #requires_town_1
					has_building = TP_pont_L2 #pont #requires_town_1
					has_building = CT_oasis_L2 #désert #requires_town_1
				}
			}
		}
		modifier = { factor = 0.8	any_province_holding = { has_building = CT_pont_fluvial_L4 }}
		modifier = { factor = 0.9	has_province_modifier = province_fleuve }
		#octroi law influence
		modifier = {
			factor = 0.8
			NOT = {
				any_province_holding = { has_holding_modifier = octroi_holding }
			}
		}
		modifier = {
			factor = 1.2
				any_province_holding = { has_holding_modifier = octroi_holding }
		}
	}

	immediate = {
		set_province_flag = checked_blocE
				#if valid, block is set, if not, nothing happens, but owner is notified
		if = {
			limit = {
				NOT = {
					# To not give step B to the province which has already a bloc
				##check by trigger already
					#has_province_flag = bloc_A
					#has_province_flag = bloc_B
					#has_province_flag = bloc_C
					#has_province_flag = bloc_D
					#has_province_flag = bloc_E
					
					#can't connect to any block
					any_neighbor_province = { has_province_flag = bloc_A }
					any_neighbor_province = { has_province_flag = bloc_B }
					any_neighbor_province = { has_province_flag = bloc_C }
					any_neighbor_province = { has_province_flag = bloc_E }
				}
			}
			hidden_tooltip = {	
				set_province_flag = bloc_E		
				add_province_modifier = { name = prosperity_modifier_1 duration = -1 hidden=yes}

				# Update the route size in previous blocs (here D)				
				any_neighbor_province = {
					limit = { has_province_flag = bloc_D }
					province_event = { id = L3TRADE.8 days = 10}
				}
				
				add_province_modifier = { name = future_route duration = -1 }
				any_neighbor_province = {
					limit = { has_province_flag = bloc_D }
					save_event_target_as = origin_trade_province
				}

				#mark as checked_bloc invalide neighbors
				any_neighbor_province = {
					limit = {
						#not has a bloc already
						NOT = {
							has_province_flag = bloc_A
							has_province_flag = bloc_B
							has_province_flag = bloc_C
							has_province_flag = bloc_D
							has_province_flag = bloc_E
							#has_province_flag = invalidate_trade
						}
						#is not invalidated already
						NOT = { 
							has_province_flag = checked_blocE
						}
						#fits same conditions
						any_neighbor_province = {
							has_province_flag = bloc_D
						}
					}
					set_province_flag = checked_blocE
					#set_province_flag = invalidate_trade
					province_event = { id = L3TRADE.21 }
				}
			}
			province_event = { id = L3TRADE.20 }
		}
	}
		
	option = {
		name = "OK"
	}
	
	#option = {
	#	name = "L3TRADESTEPOK"
	#	#merchants start using the province
	#	trigger = { has_province_flag = bloc_B }
	#}
	
	#option = {
	#	name = "L3TRADESTEPKO"
	#	trigger = { 
	#		NOT = {
	#			#has_province_flag = bloc_A
	#			has_province_flag = bloc_B
	#			#has_province_flag = bloc_C
	#			#has_province_flag = bloc_D
	#			#has_province_flag = bloc_E
	#		}
	#	}
	#}
	##now checked before, limits spam
	#option = {
	#	name = "L3TRADESTEPALREADY"
	#	trigger = { 
	#		OR = {
	#			has_province_flag = bloc_A
	#			has_province_flag = bloc_C
	#			has_province_flag = bloc_D
	#			has_province_flag = bloc_E
	#		}
	#	}
	#}
}

# Give the route modifier
province_event = {
    id = L3TRADE.5
	desc = "DESCL3TRADE.5"
	picture = GFX_evt_market
	
	trigger = {
		has_province_modifier = future_route
		any_province_holding = {
			OR = {
				has_building = CA_route_L1
				has_building = CT_route_L1
				has_building = TP_route_L1
				has_building = CA_fleuve_L1
				has_building = CT_fleuve_L1
				has_building = TP_fleuve_L1
			}
		}
	}
	
	mean_time_to_happen = {
		months = 15
		modifier = { 
			factor = 0.9
				OR = {
					any_province_holding = { has_building = CA_route_L1 }
					any_province_holding = { has_building = CT_route_L1 }
					any_province_holding = { has_building = TP_route_L1 }
					any_province_holding = { has_building = CA_fleuve_L1 }
					any_province_holding = { has_building = CT_fleuve_L1 }
					any_province_holding = { has_building = TP_fleuve_L1 }
				}
		}
		modifier = { 
			factor = 0.8
				OR = {
					any_province_holding = { has_building = CA_route_L2 }
					any_province_holding = { has_building = CT_route_L2 }
					any_province_holding = { has_building = TP_route_L2 }
					any_province_holding = { has_building = CA_fleuve_L2 }
					any_province_holding = { has_building = CT_fleuve_L2 }
					any_province_holding = { has_building = TP_fleuve_L2 }
				}
		}
		modifier = { #more connected
			factor = 0.9
			any_province_holding = {
				OR = {
					has_building = CA_col_L1
					has_building = CT_col_L1
					has_building = TP_col_L1
				}
			}
		}
		modifier = {
			factor = 0.9
			any_province_holding = {
				OR = {
					has_building = CT_relais_L1
					has_building = TP_relais_L1
				}
			}
		}
		modifier = {
			factor = 0.9
			any_province_holding = {
				OR = {
					has_building = CA_pont_L2 #pont #requires_town_1
					has_building = CT_pont_L2 #pont #requires_town_1
					has_building = TP_pont_L2 #pont #requires_town_1
					has_building = CT_oasis_L2 #désert #requires_town_1
				}
			}
		}
		modifier = { factor = 0.8	any_province_holding = { has_building = CT_pont_fluvial_L4 }}
		modifier = { factor = 0.8	any_province_holding = { has_building = VOC_COMMERCIALE }}#there is a commercial city
 		modifier = { factor = 1.2	any_province_holding = { has_building = VOC_INDUSTRIELLE }}#not my business
		#modifier = { factor = 0.9	any_province_holding = { has_building = CITE_L2 }}#the bigger the better	
		#modifier = { factor = 0.9	any_province_holding = { has_building = CITE_L3 }}#the bigger the better
		#octroi law influence
		modifier = {
			factor = 0.8
			NOT = {
				any_province_holding = { has_holding_modifier = octroi_holding }
			}
		}
		modifier = {
			factor = 1.2
				any_province_holding = { has_holding_modifier = octroi_holding }
		}
	}
	
	option = {
		name = "L3TRADE.5A"
		custom_tooltip = { text = recoit_une_route_commerciale }
		hidden_tooltip = {
			remove_province_modifier = future_route
			if = {
				limit = { has_province_modifier = province_fleuve }
				add_province_modifier = { name = route_fluviale duration = -1 }
				any_province_holding = {
					limit = {
						OR = {
							holding_type = castle
							holding_type = temple
							holding_type = city
						}
					}
					change_variable = { which = "developpement" value = 10 } #pour la route 
					change_variable = { which = "developpement_road" value = 10 }
				}
			}
			if = {
				limit = { NOT = { has_province_modifier = province_fleuve } }
				add_province_modifier = { name = route_terrestre duration = -1 }
				any_province_holding = {
					limit = {
						OR = {
							holding_type = castle
							holding_type = temple
							holding_type = city
						}
					}
					change_variable = { which = "developpement" value = 10 } #pour la route 
					change_variable = { which = "developpement_road" value = 10 } 
				}
			}
			
			# inform the player does not receive this event...
				any_neighbor_province = {
					owner = { ai = no }
					NOT = {
						has_province_flag = bloc_A
						has_province_flag = bloc_B
						has_province_flag = bloc_C
						has_province_flag = bloc_D
						has_province_flag = bloc_E
						has_province_flag = invalidate_trade
					}
				save_event_target_as = province_pour_desc
				province_event = { id = L3TRADE.9 days = 10 }
			}
		}
	}
}

# Give the commercial node modifier
province_event = {
    id = L3TRADE.6
	hide_window = yes
	
	trigger = {
		NOT = { has_province_modifier = noeud_commercial_annexe }
		OR = {
			has_province_flag = bloc_C
			has_province_flag = bloc_D
			has_province_flag = bloc_E
		}
		any_neighbor_province = {
			count = 3
			OR = {
				has_province_modifier = route_fluviale
				has_province_modifier = route_terrestre
			}
		}
	}
	
	mean_time_to_happen = {
		months = 10
	}
	
	immediate = {
		add_province_modifier = { name = noeud_commercial_annexe duration = -1 }
		any_province_holding = {
			limit = {
				OR = {
					holding_type = castle
					holding_type = temple
					holding_type = city
				}
			}
			change_variable = { which = "developpement" value = 10 } #pour la route 
			change_variable = { which = "developpement_road" value = 10 }
		}
	}
}

# Update the modifier of the route size
province_event = {
    id = L3TRADE.7
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		remove_province_modifier = route_size1
		remove_province_modifier = route_size2
		remove_province_modifier = route_size3
		remove_province_modifier = route_size4		
		if = {
			limit = { is_variable_equal = { which = "route_size" value = 2 } }
			add_province_modifier = { name = route_size2 duration = -1 }
			any_province_holding = {
				limit = {
					OR = {
						holding_type = castle
						holding_type = temple
						holding_type = city
					}
				}
				change_variable = { which = "developpement" value = 10 } #pour la route 
				change_variable = { which = "developpement_road" value = 10 }
			}
		}
		if = {
			limit = { is_variable_equal = { which = "route_size" value = 3 } }
			add_province_modifier = { name = route_size3 duration = -1 }
			any_province_holding = {
				limit = {
					OR = {
						holding_type = castle
						holding_type = temple
						holding_type = city
					}
				}
				change_variable = { which = "developpement" value = 10 } #pour la route 
				change_variable = { which = "developpement_road" value = 10 }
			}
		}
		if = {
			limit = { is_variable_equal = { which = "route_size" value = 4 } }
			add_province_modifier = { name = route_size4 duration = -1 }
			any_province_holding = {
				limit = {
					OR = {
						holding_type = castle
						holding_type = temple
						holding_type = city
					}
				}
				change_variable = { which = "developpement" value = 10 } #pour la route
				change_variable = { which = "developpement_road" value = 10 } 
			}
		}
		if = {
			limit = { is_variable_equal = { which = "route_size" value = 5 } }
			add_province_modifier = { name = route_size5 duration = -1 }
			any_province_holding = {
				limit = {
					tier = baron
					OR = {
						holding_type = castle
						holding_type = temple
						holding_type = city
					}
				}
				change_variable = { which = "developpement" value = 10 } #pour la route
				change_variable = { which = "developpement_road" value = 10 } 
			}
		}
	}
}

# Update the route size variable for previous steps
# REQUIRED : The caller (a next step, EX: C for B) has the same values in route_size and tmp
province_event = {
    id = L3TRADE.8
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		if = {
			limit = { has_province_flag = bloc_A }			
			FROM = { subtract_variable = { which = "route_size" which = PREV} }
			if = {
				limit = { FROM = { check_variable = { which = "route_size" value = 0 } } }
				# We have found a neighboor with a less route_size value, so we update the value
				FROM = { set_variable = { which = "route_size" which = "tmp"} } # restore route_size value
				set_variable = { which = "route_size" which = FROM}
				change_variable = { which = "route_size" value = 1}
				# Update the modifier
				province_event = { id = L3TRADE.7 days = 10}
			}
			# Reset the route_size with the stored value
			FROM = { set_variable = { which = "route_size" which = "tmp"} }
		}
		
		if = {
			limit = { has_province_flag = bloc_B }			
			FROM = { subtract_variable = { which = "route_size" which = PREV} }
			if = {
				limit = { FROM = { check_variable = { which = "route_size" value = 0 } } }
				# We have found a neighboor with a less route_size value, so we update the value
				FROM = { set_variable = { which = "route_size" which = "tmp"} } # restore route_size value
				set_variable = { which = "route_size" which = FROM}
				change_variable = { which = "route_size" value = 1}
				set_variable = { which = "tmp" which = "route_size"} #copy in tmp before to call L3TRADE.8
				# Update previous steps
				any_neighbor_province = {
					limit = { has_province_flag = bloc_A }
					province_event = { id = L3TRADE.8 days = 10}
				}				
			}
			# Reset the route_size with the stored value
			FROM = { set_variable = { which = "route_size" which = "tmp"} }
		}
		
		if = {
			limit = { has_province_flag = bloc_C }			
			FROM = { subtract_variable = { which = "route_size" which = PREV} }
			if = {
				limit = { FROM = { check_variable = { which = "route_size" value = 0 } } }
				# We have found a neighboor with a less route_size value, so we update the value
				FROM = { set_variable = { which = "route_size" which = "tmp"} } # restore route_size value
				set_variable = { which = "route_size" which = FROM}
				change_variable = { which = "route_size" value = 1}
				set_variable = { which = "tmp" which = "route_size"} #copy in tmp before to call L3TRADE.8
				# Update previous steps
				any_neighbor_province = {
					limit = { has_province_flag = bloc_B }
					province_event = { id = L3TRADE.8 days = 10}
				}				
			}
			# Reset the route_size with the stored value
			FROM = { set_variable = { which = "route_size" which = "tmp"} }
		}
		
		if = {
			limit = { has_province_flag = bloc_D }
				set_variable = { which = "route_size" value = 2}
				set_variable = { which = "tmp" value = 2} #copy in tmp before to call L3TRADE.8
				# Update previous steps
				any_neighbor_province = {
					limit = { has_province_flag = bloc_C }
					province_event = { id = L3TRADE.8 days = 10}
				}				
			# Reset the route_size with the stored value
			FROM = { set_variable = { which = "route_size" which = "tmp"} }
		}
	}
}

# Avert the player that the route building can be build on its demesne
character_event = {
    id = L3TRADE.9
	desc = "DESCL3TRADE.9"
	picture = GFX_evt_market

	is_triggered_only = yes
	#hide_from = yes
	
	option = {
		name = "L3TRADE.9A"
	}
}

# Avert the player that a route is on its demesne
narrative_event = {
    id = L3TRADE.10
	title = NAME.L3TRADE.10
	desc = "DESCL3TRADE.10"
	picture = GFX_evt_market

	is_triggered_only = yes	
	#hide_from = yes
	
	option = {
		name = "L3TRADE.10A"
		custom_tooltip = { text = TRADE_L3T.9 }
	}
}
#Inform the player that the province WILL host a road
province_event = {
    id = L3TRADE.20
	desc = "DESCSTEP"
	picture = GFX_evt_market
	is_triggered_only = yes	
	#hide_from = yes

	option = {
		name = "L3TRADESTEPOK"
		event_target:province_pour_desc = { clear_event_target = province_pour_desc }
		event_target:origin_trade_province = { clear_event_target = province_pour_desc }
	}
}
#Inform the player that the province WON'T host a road
province_event = {
    id = L3TRADE.21
	desc = "L3TRADESTEPKO"
	picture = GFX_evt_market

	is_triggered_only = yes	
	#hide_from = yes
	
	option = {
		name = "KO"
		event_target:province_pour_desc = { clear_event_target = province_pour_desc }
		event_target:origin_trade_province = { clear_event_target = province_pour_desc }
	}
}
